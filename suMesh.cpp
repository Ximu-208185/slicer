/*
Copyright (c) 2015, Yuan Yao (fly2mars@gmail.com)
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
* Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
#include "suMesh.h"
#include <algorithm>
#include <iostream>
void Trimesh::read_file(const char* file_name) {
	if (p_mesh != NULL)
		delete p_mesh;
	p_mesh = new stl_reader::StlMesh <float, unsigned int>(file_name);

	// compute model size	
	std::vector<float> minP(3, FLT_MAX);
	std::vector<float> maxP(3, -FLT_MAX);
	for (size_t vi = 0; vi < p_mesh->num_vrts(); vi++) {		
		minP[0] = std::min(V(vi)[0], minP[0]);
		minP[1] = std::min(V(vi)[1], minP[1]);
		minP[2] = std::min(V(vi)[2], minP[2]);
		maxP[0] = std::max(V(vi)[0], maxP[0]);
		maxP[1] = std::max(V(vi)[1], maxP[1]);
		maxP[2] = std::max(V(vi)[2], maxP[2]);
	}
	minP_ = minP;
	maxP_ = maxP;
}
float Trimesh::get_f_maxz(unsigned int fi)
{
	float zmax = p_mesh->tri_corner_coords(fi, 0)[2];
	for (int i = 1; i < 3; i++) {
		zmax = std::max(zmax, p_mesh->tri_corner_coords(fi, i)[2]);
	}
	return zmax;
}
float Trimesh::get_f_minz(unsigned int fi) {
	float zmin = p_mesh->tri_corner_coords(fi, 0)[2];
	for (int i = 1; i < 3; i++) {
		zmin = std::min(zmin, p_mesh->tri_corner_coords(fi, i)[2]);
	}
	return zmin;
}

void Trimesh::save_to_ascii(char * filename)
{
	std::ofstream File(filename);
	File << "solid STL generated by suSlicer" << std::endl;
	for (unsigned int i = 0; i < num_F(); i++)
	{
		File << "  facet normal " << N(i)[0] << " "<< N(i)[1] << " "<< N(i)[2] << std::endl;
		File << "    outer loop" << std::endl;
		for (int j = 0; j < 3; j++)
		{
			unsigned int vi = F(i)[j];
			File << "      vertex " << V(vi)[0] << " " << V(vi)[1] << " " << V(vi)[2] << std::endl;
		}
		File << "    endloop" << std::endl;
		File << "  endfacet" << std::endl;
	}
	File << "endsolid vcg" << std::endl;

}

void Trimesh::save_faces_to_ascii(char * filename, std::vector<unsigned int> faces)
{
	std::ofstream File(filename);
	File << "solid STL generated by suSlicer" << std::endl;
	for (unsigned int i = 0; i < faces.size(); i++)
	{
		unsigned int fi = faces[i];
		File << "  facet normal " << N(fi)[0] << " " << N(fi)[1] << " " << N(fi)[2] << std::endl;
		File << "    outer loop" << std::endl;
		for (int j = 0; j < 3; j++)
		{
			unsigned int vi = F(fi)[j];
			File << "      vertex " << V(vi)[0] << " " << V(vi)[1] << " " << V(vi)[2] << std::endl;
		}
		File << "    endloop" << std::endl;
		File << "  endfacet" << std::endl;
	}
	File << "endsolid vcg" << std::endl;
}
